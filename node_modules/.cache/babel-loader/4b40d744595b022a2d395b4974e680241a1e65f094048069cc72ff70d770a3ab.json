{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _module = _interopRequireDefault(require(\"module\"));\nvar _full = require(\"klona/full\");\nvar _cosmiconfig = require(\"cosmiconfig\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst parentModule = module;\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n    resolve(stats);\n  });\n});\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n  return module.exports;\n}\nasync function loadConfig(loaderContext, config, postcssOptions) {\n  const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n  let stats;\n  try {\n    stats = await stat(loaderContext.fs, searchPath);\n  } catch (errorIgnore) {\n    throw new Error(`No PostCSS config found in: ${searchPath}`);\n  }\n  const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n  let result;\n  try {\n    if (stats.isFile()) {\n      result = await explorer.load(searchPath);\n    } else {\n      result = await explorer.search(searchPath);\n    }\n  } catch (error) {\n    throw error;\n  }\n  if (!result) {\n    return {};\n  }\n  loaderContext.addBuildDependency(result.filepath);\n  loaderContext.addDependency(result.filepath);\n  if (result.isEmpty) {\n    return result;\n  }\n  if (typeof result.config === \"function\") {\n    const api = {\n      mode: loaderContext.mode,\n      file: loaderContext.resourcePath,\n      // For complex use\n      webpackLoaderContext: loaderContext,\n      // Partial compatibility with `postcss-cli`\n      env: loaderContext.mode,\n      options: postcssOptions || {}\n    };\n    result.config = result.config(api);\n  }\n  result = (0, _full.klona)(result);\n  return result;\n}\nfunction loadPlugin(plugin, options, file) {\n  try {\n    if (!options || Object.keys(options).length === 0) {\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const loadedPlugin = require(plugin);\n      if (loadedPlugin.default) {\n        return loadedPlugin.default;\n      }\n      return loadedPlugin;\n    } // eslint-disable-next-line global-require, import/no-dynamic-require\n\n    const loadedPlugin = require(plugin);\n    if (loadedPlugin.default) {\n      return loadedPlugin.default(options);\n    }\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n    return listOfPlugins;\n  };\n}\nasync function tryRequireThenImport(module) {\n  let exports;\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    exports = require(module);\n    return exports;\n  } catch (requireError) {\n    let importESM;\n    try {\n      // eslint-disable-next-line no-new-func\n      importESM = new Function(\"id\", \"return import(id);\");\n    } catch (e) {\n      importESM = null;\n    }\n    if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n      exports = await importESM(module);\n      return exports.default;\n    }\n    throw requireError;\n  }\n}\nasync function getPostcssOptions(loaderContext, loadedConfig = {}, postcssOptions = {}) {\n  const file = loaderContext.resourcePath;\n  let normalizedPostcssOptions = postcssOptions;\n  if (typeof normalizedPostcssOptions === \"function\") {\n    normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n  }\n  let plugins = [];\n  try {\n    const factory = pluginFactory();\n    if (loadedConfig.config && loadedConfig.config.plugins) {\n      factory(loadedConfig.config.plugins);\n    }\n    factory(normalizedPostcssOptions.plugins);\n    plugins = [...factory()].map(item => {\n      const [plugin, options] = item;\n      if (typeof plugin === \"string\") {\n        return loadPlugin(plugin, options, file);\n      }\n      return plugin;\n    });\n  } catch (error) {\n    loaderContext.emitError(error);\n  }\n  const processOptionsFromConfig = loadedConfig.config || {};\n  if (processOptionsFromConfig.from) {\n    processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n  }\n  if (processOptionsFromConfig.to) {\n    processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n  } // No need them for processOptions\n\n  delete processOptionsFromConfig.plugins;\n  const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n  if (processOptionsFromOptions.from) {\n    processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n  }\n  if (processOptionsFromOptions.to) {\n    processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n  } // No need them for processOptions\n\n  delete processOptionsFromOptions.config;\n  delete processOptionsFromOptions.plugins;\n  const processOptions = {\n    from: file,\n    to: file,\n    map: false,\n    ...processOptionsFromConfig,\n    ...processOptionsFromOptions\n  };\n  if (typeof processOptions.parser === \"string\") {\n    try {\n      processOptions.parser = await tryRequireThenImport(processOptions.parser);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n  if (typeof processOptions.stringifier === \"string\") {\n    try {\n      processOptions.stringifier = await tryRequireThenImport(processOptions.stringifier);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n  if (typeof processOptions.syntax === \"string\") {\n    try {\n      processOptions.syntax = await tryRequireThenImport(processOptions.syntax);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n  if (processOptions.map === true) {\n    // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n    processOptions.map = {\n      inline: true\n    };\n  }\n  return {\n    plugins,\n    processOptions\n  };\n}\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n    return \"path-absolute\";\n  }\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n      return source;\n    });\n  }\n  return newMap;\n}\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n    return source;\n  });\n  return newMap;\n}\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n    const parent = _path.default.dirname(dir);\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n    dir = parent;\n  }\n  return dir;\n}\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n  return resolvedImplementation;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","exec","findPackageJSONDir","getPostcssImplementation","getPostcssOptions","loadConfig","normalizeSourceMap","normalizeSourceMapAfterPostcss","_path","_interopRequireDefault","require","_module","_full","_cosmiconfig","obj","__esModule","default","parentModule","module","stat","inputFileSystem","filePath","Promise","resolve","reject","err","stats","code","loaderContext","resource","context","paths","_nodeModulePaths","filename","_compile","config","postcssOptions","searchPath","dirname","resourcePath","fs","errorIgnore","Error","explorer","cosmiconfig","result","isFile","load","search","error","addBuildDependency","filepath","addDependency","isEmpty","api","mode","file","webpackLoaderContext","env","options","klona","loadPlugin","plugin","keys","length","loadedPlugin","message","pluginFactory","listOfPlugins","Map","plugins","Array","isArray","name","set","delete","objectPlugins","entries","tryRequireThenImport","requireError","importESM","Function","e","loadedConfig","normalizedPostcssOptions","factory","map","item","emitError","processOptionsFromConfig","from","to","processOptionsFromOptions","rootContext","processOptions","parser","stringifier","syntax","inline","IS_NATIVE_WIN32_PATH","ABSOLUTE_SCHEME","getURLType","source","test","resourceContext","newMap","JSON","parse","sourceRoot","sources","sourceType","absoluteSource","normalize","relative","indexOf","cwd","statSync","dir","join","parent","implementation","resolvedImplementation","postcssImplPkg"],"sources":["C:/Users/pehqi/my-react-app/node_modules/postcss-loader/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _full = require(\"klona/full\");\n\nvar _cosmiconfig = require(\"cosmiconfig\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst parentModule = module;\n\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n\n  return module.exports;\n}\n\nasync function loadConfig(loaderContext, config, postcssOptions) {\n  const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n  let stats;\n\n  try {\n    stats = await stat(loaderContext.fs, searchPath);\n  } catch (errorIgnore) {\n    throw new Error(`No PostCSS config found in: ${searchPath}`);\n  }\n\n  const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n  let result;\n\n  try {\n    if (stats.isFile()) {\n      result = await explorer.load(searchPath);\n    } else {\n      result = await explorer.search(searchPath);\n    }\n  } catch (error) {\n    throw error;\n  }\n\n  if (!result) {\n    return {};\n  }\n\n  loaderContext.addBuildDependency(result.filepath);\n  loaderContext.addDependency(result.filepath);\n\n  if (result.isEmpty) {\n    return result;\n  }\n\n  if (typeof result.config === \"function\") {\n    const api = {\n      mode: loaderContext.mode,\n      file: loaderContext.resourcePath,\n      // For complex use\n      webpackLoaderContext: loaderContext,\n      // Partial compatibility with `postcss-cli`\n      env: loaderContext.mode,\n      options: postcssOptions || {}\n    };\n    result.config = result.config(api);\n  }\n\n  result = (0, _full.klona)(result);\n  return result;\n}\n\nfunction loadPlugin(plugin, options, file) {\n  try {\n    if (!options || Object.keys(options).length === 0) {\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const loadedPlugin = require(plugin);\n\n      if (loadedPlugin.default) {\n        return loadedPlugin.default;\n      }\n\n      return loadedPlugin;\n    } // eslint-disable-next-line global-require, import/no-dynamic-require\n\n\n    const loadedPlugin = require(plugin);\n\n    if (loadedPlugin.default) {\n      return loadedPlugin.default(options);\n    }\n\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\n\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n\n    return listOfPlugins;\n  };\n}\n\nasync function tryRequireThenImport(module) {\n  let exports;\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    exports = require(module);\n    return exports;\n  } catch (requireError) {\n    let importESM;\n\n    try {\n      // eslint-disable-next-line no-new-func\n      importESM = new Function(\"id\", \"return import(id);\");\n    } catch (e) {\n      importESM = null;\n    }\n\n    if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n      exports = await importESM(module);\n      return exports.default;\n    }\n\n    throw requireError;\n  }\n}\n\nasync function getPostcssOptions(loaderContext, loadedConfig = {}, postcssOptions = {}) {\n  const file = loaderContext.resourcePath;\n  let normalizedPostcssOptions = postcssOptions;\n\n  if (typeof normalizedPostcssOptions === \"function\") {\n    normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n  }\n\n  let plugins = [];\n\n  try {\n    const factory = pluginFactory();\n\n    if (loadedConfig.config && loadedConfig.config.plugins) {\n      factory(loadedConfig.config.plugins);\n    }\n\n    factory(normalizedPostcssOptions.plugins);\n    plugins = [...factory()].map(item => {\n      const [plugin, options] = item;\n\n      if (typeof plugin === \"string\") {\n        return loadPlugin(plugin, options, file);\n      }\n\n      return plugin;\n    });\n  } catch (error) {\n    loaderContext.emitError(error);\n  }\n\n  const processOptionsFromConfig = loadedConfig.config || {};\n\n  if (processOptionsFromConfig.from) {\n    processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n  }\n\n  if (processOptionsFromConfig.to) {\n    processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromConfig.plugins;\n  const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n\n  if (processOptionsFromOptions.from) {\n    processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n  }\n\n  if (processOptionsFromOptions.to) {\n    processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromOptions.config;\n  delete processOptionsFromOptions.plugins;\n  const processOptions = {\n    from: file,\n    to: file,\n    map: false,\n    ...processOptionsFromConfig,\n    ...processOptionsFromOptions\n  };\n\n  if (typeof processOptions.parser === \"string\") {\n    try {\n      processOptions.parser = await tryRequireThenImport(processOptions.parser);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.stringifier === \"string\") {\n    try {\n      processOptions.stringifier = await tryRequireThenImport(processOptions.stringifier);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.syntax === \"string\") {\n    try {\n      processOptions.syntax = await tryRequireThenImport(processOptions.syntax);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (processOptions.map === true) {\n    // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n    processOptions.map = {\n      inline: true\n    };\n  }\n\n  return {\n    plugins,\n    processOptions\n  };\n}\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n\n      return source;\n    });\n  }\n\n  return newMap;\n}\n\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n\n    return source;\n  });\n  return newMap;\n}\n\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n\n    const parent = _path.default.dirname(dir);\n\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n\n    dir = parent;\n  }\n\n  return dir;\n}\n\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}