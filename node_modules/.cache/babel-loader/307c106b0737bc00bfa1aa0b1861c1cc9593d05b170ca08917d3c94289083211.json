{"ast":null,"code":"const importPattern = /^:import\\((\"[^\"]*\"|'[^']*'|[^\"']+)\\)$/;\nconst balancedQuotes = /^(\"[^\"]*\"|'[^']*'|[^\"']+)$/;\nconst getDeclsObject = rule => {\n  const object = {};\n  rule.walkDecls(decl => {\n    const before = decl.raws.before ? decl.raws.before.trim() : \"\";\n    object[before + decl.prop] = decl.value;\n  });\n  return object;\n};\n/**\n *\n * @param {string} css\n * @param {boolean} removeRules\n * @param {'auto' | 'rule' | 'at-rule'} mode\n */\nconst extractICSS = (css, removeRules = true, mode = \"auto\") => {\n  const icssImports = {};\n  const icssExports = {};\n  function addImports(node, path) {\n    const unquoted = path.replace(/'|\"/g, \"\");\n    icssImports[unquoted] = Object.assign(icssImports[unquoted] || {}, getDeclsObject(node));\n    if (removeRules) {\n      node.remove();\n    }\n  }\n  function addExports(node) {\n    Object.assign(icssExports, getDeclsObject(node));\n    if (removeRules) {\n      node.remove();\n    }\n  }\n  css.each(node => {\n    if (node.type === \"rule\" && mode !== \"at-rule\") {\n      if (node.selector.slice(0, 7) === \":import\") {\n        const matches = importPattern.exec(node.selector);\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n      if (node.selector === \":export\") {\n        addExports(node);\n      }\n    }\n    if (node.type === \"atrule\" && mode !== \"rule\") {\n      if (node.name === \"icss-import\") {\n        const matches = balancedQuotes.exec(node.params);\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n      if (node.name === \"icss-export\") {\n        addExports(node);\n      }\n    }\n  });\n  return {\n    icssImports,\n    icssExports\n  };\n};\nmodule.exports = extractICSS;","map":{"version":3,"names":["importPattern","balancedQuotes","getDeclsObject","rule","object","walkDecls","decl","before","raws","trim","prop","value","extractICSS","css","removeRules","mode","icssImports","icssExports","addImports","node","path","unquoted","replace","Object","assign","remove","addExports","each","type","selector","slice","matches","exec","name","params","module","exports"],"sources":["C:/Users/pehqi/my-react-app/node_modules/icss-utils/src/extractICSS.js"],"sourcesContent":["const importPattern = /^:import\\((\"[^\"]*\"|'[^']*'|[^\"']+)\\)$/;\nconst balancedQuotes = /^(\"[^\"]*\"|'[^']*'|[^\"']+)$/;\n\nconst getDeclsObject = (rule) => {\n  const object = {};\n\n  rule.walkDecls((decl) => {\n    const before = decl.raws.before ? decl.raws.before.trim() : \"\";\n\n    object[before + decl.prop] = decl.value;\n  });\n\n  return object;\n};\n/**\n *\n * @param {string} css\n * @param {boolean} removeRules\n * @param {'auto' | 'rule' | 'at-rule'} mode\n */\nconst extractICSS = (css, removeRules = true, mode = \"auto\") => {\n  const icssImports = {};\n  const icssExports = {};\n\n  function addImports(node, path) {\n    const unquoted = path.replace(/'|\"/g, \"\");\n    icssImports[unquoted] = Object.assign(\n      icssImports[unquoted] || {},\n      getDeclsObject(node)\n    );\n\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  function addExports(node) {\n    Object.assign(icssExports, getDeclsObject(node));\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  css.each((node) => {\n    if (node.type === \"rule\" && mode !== \"at-rule\") {\n      if (node.selector.slice(0, 7) === \":import\") {\n        const matches = importPattern.exec(node.selector);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n\n      if (node.selector === \":export\") {\n        addExports(node);\n      }\n    }\n\n    if (node.type === \"atrule\" && mode !== \"rule\") {\n      if (node.name === \"icss-import\") {\n        const matches = balancedQuotes.exec(node.params);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n      if (node.name === \"icss-export\") {\n        addExports(node);\n      }\n    }\n  });\n\n  return { icssImports, icssExports };\n};\n\nmodule.exports = extractICSS;\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,uCAAuC;AAC7D,MAAMC,cAAc,GAAG,4BAA4B;AAEnD,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC/B,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjBD,IAAI,CAACE,SAAS,CAAEC,IAAI,IAAK;IACvB,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAI,CAACD,MAAM,GAAGD,IAAI,CAACE,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,GAAG,EAAE;IAE9DL,MAAM,CAACG,MAAM,GAAGD,IAAI,CAACI,IAAI,CAAC,GAAGJ,IAAI,CAACK,KAAK;EACzC,CAAC,CAAC;EAEF,OAAOP,MAAM;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,WAAW,GAAGA,CAACC,GAAG,EAAEC,WAAW,GAAG,IAAI,EAAEC,IAAI,GAAG,MAAM,KAAK;EAC9D,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,CAAC,CAAC;EAEtB,SAASC,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC9B,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IACzCN,WAAW,CAACK,QAAQ,CAAC,GAAGE,MAAM,CAACC,MAAM,CACnCR,WAAW,CAACK,QAAQ,CAAC,IAAI,CAAC,CAAC,EAC3BnB,cAAc,CAACiB,IAAI,CACrB,CAAC;IAED,IAAIL,WAAW,EAAE;MACfK,IAAI,CAACM,MAAM,CAAC,CAAC;IACf;EACF;EAEA,SAASC,UAAUA,CAACP,IAAI,EAAE;IACxBI,MAAM,CAACC,MAAM,CAACP,WAAW,EAAEf,cAAc,CAACiB,IAAI,CAAC,CAAC;IAChD,IAAIL,WAAW,EAAE;MACfK,IAAI,CAACM,MAAM,CAAC,CAAC;IACf;EACF;EAEAZ,GAAG,CAACc,IAAI,CAAER,IAAI,IAAK;IACjB,IAAIA,IAAI,CAACS,IAAI,KAAK,MAAM,IAAIb,IAAI,KAAK,SAAS,EAAE;MAC9C,IAAII,IAAI,CAACU,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;QAC3C,MAAMC,OAAO,GAAG/B,aAAa,CAACgC,IAAI,CAACb,IAAI,CAACU,QAAQ,CAAC;QAEjD,IAAIE,OAAO,EAAE;UACXb,UAAU,CAACC,IAAI,EAAEY,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B;MACF;MAEA,IAAIZ,IAAI,CAACU,QAAQ,KAAK,SAAS,EAAE;QAC/BH,UAAU,CAACP,IAAI,CAAC;MAClB;IACF;IAEA,IAAIA,IAAI,CAACS,IAAI,KAAK,QAAQ,IAAIb,IAAI,KAAK,MAAM,EAAE;MAC7C,IAAII,IAAI,CAACc,IAAI,KAAK,aAAa,EAAE;QAC/B,MAAMF,OAAO,GAAG9B,cAAc,CAAC+B,IAAI,CAACb,IAAI,CAACe,MAAM,CAAC;QAEhD,IAAIH,OAAO,EAAE;UACXb,UAAU,CAACC,IAAI,EAAEY,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B;MACF;MACA,IAAIZ,IAAI,CAACc,IAAI,KAAK,aAAa,EAAE;QAC/BP,UAAU,CAACP,IAAI,CAAC;MAClB;IACF;EACF,CAAC,CAAC;EAEF,OAAO;IAAEH,WAAW;IAAEC;EAAY,CAAC;AACrC,CAAC;AAEDkB,MAAM,CAACC,OAAO,GAAGxB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}