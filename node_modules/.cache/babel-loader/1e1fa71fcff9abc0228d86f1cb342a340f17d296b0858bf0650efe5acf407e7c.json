{"ast":null,"code":"\"use strict\";\n\n/**\n * RegexParser\n * Parses a string input.\n *\n * @name RegexParser\n * @function\n * @param {String} input The string input that should be parsed as regular\n * expression.\n * @return {RegExp} The parsed regular expression.\n */\nvar RegexParser = module.exports = function (input) {\n  // Validate input\n  if (typeof input !== \"string\") {\n    throw new Error(\"Invalid input. Input must be a string\");\n  }\n\n  // Parse input\n  var m = input.match(/(\\/?)(.+)\\1([a-z]*)/i);\n\n  // If there's no match, throw an error\n  if (!m) {\n    throw new Error(\"Invalid regular expression format.\");\n  }\n\n  // Filter valid flags: 'g', 'i', 'm', 's', 'u', and 'y'\n  var validFlags = Array.from(new Set(m[3])).filter(function (flag) {\n    return \"gimsuy\".includes(flag);\n  }).join(\"\");\n\n  // Create the regular expression\n  return new RegExp(m[2], validFlags);\n};","map":{"version":3,"names":["RegexParser","module","exports","input","Error","m","match","validFlags","Array","from","Set","filter","flag","includes","join","RegExp"],"sources":["C:/Users/pehqi/my-react-app/node_modules/regex-parser/lib/index.js"],"sourcesContent":["\"use strict\";\n\n/**\n * RegexParser\n * Parses a string input.\n *\n * @name RegexParser\n * @function\n * @param {String} input The string input that should be parsed as regular\n * expression.\n * @return {RegExp} The parsed regular expression.\n */\nvar RegexParser = module.exports = function (input) {\n    // Validate input\n    if (typeof input !== \"string\") {\n        throw new Error(\"Invalid input. Input must be a string\");\n    }\n\n    // Parse input\n    var m = input.match(/(\\/?)(.+)\\1([a-z]*)/i);\n\n    // If there's no match, throw an error\n    if (!m) {\n        throw new Error(\"Invalid regular expression format.\");\n    }\n\n    // Filter valid flags: 'g', 'i', 'm', 's', 'u', and 'y'\n    var validFlags = Array.from(new Set(m[3])).filter(function (flag) {\n        return \"gimsuy\".includes(flag);\n    }).join(\"\");\n\n    // Create the regular expression\n    return new RegExp(m[2], validFlags);\n};"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAGC,MAAM,CAACC,OAAO,GAAG,UAAUC,KAAK,EAAE;EAChD;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;EAC5D;;EAEA;EACA,IAAIC,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,sBAAsB,CAAC;;EAE3C;EACA,IAAI,CAACD,CAAC,EAAE;IACJ,MAAM,IAAID,KAAK,CAAC,oCAAoC,CAAC;EACzD;;EAEA;EACA,IAAIG,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,UAAUC,IAAI,EAAE;IAC9D,OAAO,QAAQ,CAACC,QAAQ,CAACD,IAAI,CAAC;EAClC,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;;EAEX;EACA,OAAO,IAAIC,MAAM,CAACV,CAAC,CAAC,CAAC,CAAC,EAAEE,UAAU,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}