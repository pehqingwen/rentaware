{"ast":null,"code":"const createImports = (imports, postcss, mode = \"rule\") => {\n  return Object.keys(imports).map(path => {\n    const aliases = imports[path];\n    const declarations = Object.keys(aliases).map(key => postcss.decl({\n      prop: key,\n      value: aliases[key],\n      raws: {\n        before: \"\\n  \"\n      }\n    }));\n    const hasDeclarations = declarations.length > 0;\n    const rule = mode === \"rule\" ? postcss.rule({\n      selector: `:import('${path}')`,\n      raws: {\n        after: hasDeclarations ? \"\\n\" : \"\"\n      }\n    }) : postcss.atRule({\n      name: \"icss-import\",\n      params: `'${path}'`,\n      raws: {\n        after: hasDeclarations ? \"\\n\" : \"\"\n      }\n    });\n    if (hasDeclarations) {\n      rule.append(declarations);\n    }\n    return rule;\n  });\n};\nconst createExports = (exports, postcss, mode = \"rule\") => {\n  const declarations = Object.keys(exports).map(key => postcss.decl({\n    prop: key,\n    value: exports[key],\n    raws: {\n      before: \"\\n  \"\n    }\n  }));\n  if (declarations.length === 0) {\n    return [];\n  }\n  const rule = mode === \"rule\" ? postcss.rule({\n    selector: `:export`,\n    raws: {\n      after: \"\\n\"\n    }\n  }) : postcss.atRule({\n    name: \"icss-export\",\n    raws: {\n      after: \"\\n\"\n    }\n  });\n  rule.append(declarations);\n  return [rule];\n};\nconst createICSSRules = (imports, exports, postcss, mode) => [...createImports(imports, postcss, mode), ...createExports(exports, postcss, mode)];\nmodule.exports = createICSSRules;","map":{"version":3,"names":["createImports","imports","postcss","mode","Object","keys","map","path","aliases","declarations","key","decl","prop","value","raws","before","hasDeclarations","length","rule","selector","after","atRule","name","params","append","createExports","exports","createICSSRules","module"],"sources":["C:/Users/pehqi/my-react-app/node_modules/icss-utils/src/createICSSRules.js"],"sourcesContent":["const createImports = (imports, postcss, mode = \"rule\") => {\n  return Object.keys(imports).map((path) => {\n    const aliases = imports[path];\n    const declarations = Object.keys(aliases).map((key) =>\n      postcss.decl({\n        prop: key,\n        value: aliases[key],\n        raws: { before: \"\\n  \" },\n      })\n    );\n\n    const hasDeclarations = declarations.length > 0;\n\n    const rule =\n      mode === \"rule\"\n        ? postcss.rule({\n            selector: `:import('${path}')`,\n            raws: { after: hasDeclarations ? \"\\n\" : \"\" },\n          })\n        : postcss.atRule({\n            name: \"icss-import\",\n            params: `'${path}'`,\n            raws: { after: hasDeclarations ? \"\\n\" : \"\" },\n          });\n\n    if (hasDeclarations) {\n      rule.append(declarations);\n    }\n\n    return rule;\n  });\n};\n\nconst createExports = (exports, postcss, mode = \"rule\") => {\n  const declarations = Object.keys(exports).map((key) =>\n    postcss.decl({\n      prop: key,\n      value: exports[key],\n      raws: { before: \"\\n  \" },\n    })\n  );\n\n  if (declarations.length === 0) {\n    return [];\n  }\n  const rule =\n    mode === \"rule\"\n      ? postcss.rule({\n          selector: `:export`,\n          raws: { after: \"\\n\" },\n        })\n      : postcss.atRule({\n          name: \"icss-export\",\n          raws: { after: \"\\n\" },\n        });\n\n  rule.append(declarations);\n\n  return [rule];\n};\n\nconst createICSSRules = (imports, exports, postcss, mode) => [\n  ...createImports(imports, postcss, mode),\n  ...createExports(exports, postcss, mode),\n];\n\nmodule.exports = createICSSRules;\n"],"mappings":"AAAA,MAAMA,aAAa,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,GAAG,MAAM,KAAK;EACzD,OAAOC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAACK,GAAG,CAAEC,IAAI,IAAK;IACxC,MAAMC,OAAO,GAAGP,OAAO,CAACM,IAAI,CAAC;IAC7B,MAAME,YAAY,GAAGL,MAAM,CAACC,IAAI,CAACG,OAAO,CAAC,CAACF,GAAG,CAAEI,GAAG,IAChDR,OAAO,CAACS,IAAI,CAAC;MACXC,IAAI,EAAEF,GAAG;MACTG,KAAK,EAAEL,OAAO,CAACE,GAAG,CAAC;MACnBI,IAAI,EAAE;QAAEC,MAAM,EAAE;MAAO;IACzB,CAAC,CACH,CAAC;IAED,MAAMC,eAAe,GAAGP,YAAY,CAACQ,MAAM,GAAG,CAAC;IAE/C,MAAMC,IAAI,GACRf,IAAI,KAAK,MAAM,GACXD,OAAO,CAACgB,IAAI,CAAC;MACXC,QAAQ,EAAG,YAAWZ,IAAK,IAAG;MAC9BO,IAAI,EAAE;QAAEM,KAAK,EAAEJ,eAAe,GAAG,IAAI,GAAG;MAAG;IAC7C,CAAC,CAAC,GACFd,OAAO,CAACmB,MAAM,CAAC;MACbC,IAAI,EAAE,aAAa;MACnBC,MAAM,EAAG,IAAGhB,IAAK,GAAE;MACnBO,IAAI,EAAE;QAAEM,KAAK,EAAEJ,eAAe,GAAG,IAAI,GAAG;MAAG;IAC7C,CAAC,CAAC;IAER,IAAIA,eAAe,EAAE;MACnBE,IAAI,CAACM,MAAM,CAACf,YAAY,CAAC;IAC3B;IAEA,OAAOS,IAAI;EACb,CAAC,CAAC;AACJ,CAAC;AAED,MAAMO,aAAa,GAAGA,CAACC,OAAO,EAAExB,OAAO,EAAEC,IAAI,GAAG,MAAM,KAAK;EACzD,MAAMM,YAAY,GAAGL,MAAM,CAACC,IAAI,CAACqB,OAAO,CAAC,CAACpB,GAAG,CAAEI,GAAG,IAChDR,OAAO,CAACS,IAAI,CAAC;IACXC,IAAI,EAAEF,GAAG;IACTG,KAAK,EAAEa,OAAO,CAAChB,GAAG,CAAC;IACnBI,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAO;EACzB,CAAC,CACH,CAAC;EAED,IAAIN,YAAY,CAACQ,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAO,EAAE;EACX;EACA,MAAMC,IAAI,GACRf,IAAI,KAAK,MAAM,GACXD,OAAO,CAACgB,IAAI,CAAC;IACXC,QAAQ,EAAG,SAAQ;IACnBL,IAAI,EAAE;MAAEM,KAAK,EAAE;IAAK;EACtB,CAAC,CAAC,GACFlB,OAAO,CAACmB,MAAM,CAAC;IACbC,IAAI,EAAE,aAAa;IACnBR,IAAI,EAAE;MAAEM,KAAK,EAAE;IAAK;EACtB,CAAC,CAAC;EAERF,IAAI,CAACM,MAAM,CAACf,YAAY,CAAC;EAEzB,OAAO,CAACS,IAAI,CAAC;AACf,CAAC;AAED,MAAMS,eAAe,GAAGA,CAAC1B,OAAO,EAAEyB,OAAO,EAAExB,OAAO,EAAEC,IAAI,KAAK,CAC3D,GAAGH,aAAa,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,CAAC,EACxC,GAAGsB,aAAa,CAACC,OAAO,EAAExB,OAAO,EAAEC,IAAI,CAAC,CACzC;AAEDyB,MAAM,CAACF,OAAO,GAAGC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}