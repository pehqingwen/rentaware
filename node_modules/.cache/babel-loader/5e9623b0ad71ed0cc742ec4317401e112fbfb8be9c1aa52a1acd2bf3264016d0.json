{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _semver = require(\"semver\");\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\nvar _Error = _interopRequireDefault(require(\"./Error\"));\nvar _options = _interopRequireDefault(require(\"./options.json\"));\nvar _utils = require(\"./utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nlet hasExplicitDependencyOnPostCSS = false;\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\n\nasync function loader(content, sourceMap, meta) {\n  const options = this.getOptions(_options.default);\n  const callback = this.async();\n  const configOption = typeof options.postcssOptions === \"undefined\" || typeof options.postcssOptions.config === \"undefined\" ? true : options.postcssOptions.config;\n  const postcssFactory = (0, _utils.getPostcssImplementation)(this, options.implementation);\n  if (!postcssFactory) {\n    callback(new Error(`The Postcss implementation \"${options.implementation}\" not found`));\n    return;\n  }\n  let loadedConfig;\n  if (configOption) {\n    try {\n      loadedConfig = await (0, _utils.loadConfig)(this, configOption, options.postcssOptions);\n    } catch (error) {\n      callback(error);\n      return;\n    }\n  }\n  const useSourceMap = typeof options.sourceMap !== \"undefined\" ? options.sourceMap : this.sourceMap;\n  const {\n    plugins,\n    processOptions\n  } = await (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);\n  if (useSourceMap) {\n    processOptions.map = {\n      inline: false,\n      annotation: false,\n      ...processOptions.map\n    };\n  }\n  if (sourceMap && processOptions.map) {\n    processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n  }\n  let root; // Reuse PostCSS AST from other loaders\n\n  if (meta && meta.ast && meta.ast.type === \"postcss\" && (0, _semver.satisfies)(meta.ast.version, `^${_package.default.version}`)) {\n    ({\n      root\n    } = meta.ast);\n  }\n  if (!root && options.execute) {\n    // eslint-disable-next-line no-param-reassign\n    content = (0, _utils.exec)(content, this);\n  }\n  let result;\n  let processor;\n  try {\n    processor = postcssFactory(plugins);\n    result = await processor.process(root || content, processOptions);\n  } catch (error) {\n    // Check postcss versions to avoid using PostCSS 7.\n    // For caching reasons, we use the readFileSync and existsSync functions from the context,\n    // not the functions from the `fs` module.\n    if (!hasExplicitDependencyOnPostCSS && processor && processor.version && processor.version.startsWith(\"7.\")) {\n      // The `findPackageJsonDir` function returns `string` or `null`.\n      // This is used to do for caching, that is, an explicit comparison with `undefined`\n      // is used to make the condition body run once.\n      const packageJSONDir = (0, _utils.findPackageJSONDir)(process.cwd(), this.fs.statSync);\n      if (packageJSONDir) {\n        let bufferOfPackageJSON;\n        try {\n          bufferOfPackageJSON = this.fs.readFileSync(_path.default.resolve(packageJSONDir, \"package.json\"), \"utf8\");\n        } catch (_error) {// Nothing\n        }\n        if (bufferOfPackageJSON) {\n          let pkg;\n          try {\n            pkg = JSON.parse(bufferOfPackageJSON);\n          } catch (_error) {// Nothing\n          }\n          if (pkg) {\n            if (!pkg.dependencies.postcss && !pkg.devDependencies.postcss) {\n              this.emitWarning(new Error(\"Add postcss as project dependency. postcss is not a peer dependency for postcss-loader. \" + \"Use `npm install postcss` or `yarn add postcss`\"));\n            } else {\n              hasExplicitDependencyOnPostCSS = true;\n            }\n          }\n        }\n      }\n    }\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n    if (error.name === \"CssSyntaxError\") {\n      callback(new _Error.default(error));\n    } else {\n      callback(error);\n    }\n    return;\n  }\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n  for (const message of result.messages) {\n    // eslint-disable-next-line default-case\n    switch (message.type) {\n      case \"dependency\":\n        this.addDependency(message.file);\n        break;\n      case \"build-dependency\":\n        this.addBuildDependency(message.file);\n        break;\n      case \"missing-dependency\":\n        this.addMissingDependency(message.file);\n        break;\n      case \"context-dependency\":\n        this.addContextDependency(message.file);\n        break;\n      case \"dir-dependency\":\n        this.addContextDependency(message.dir);\n        break;\n      case \"asset\":\n        if (message.content && message.file) {\n          this.emitFile(message.file, message.content, message.sourceMap, message.info);\n        }\n    }\n  } // eslint-disable-next-line no-undefined\n\n  let map = result.map ? result.map.toJSON() : undefined;\n  if (map && useSourceMap) {\n    map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n  }\n  const ast = {\n    type: \"postcss\",\n    version: result.processor.version,\n    root: result.root\n  };\n  callback(null, result.css, map, {\n    ast\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","loader","_path","_interopRequireDefault","require","_semver","_package","_Warning","_Error","_options","_utils","obj","__esModule","hasExplicitDependencyOnPostCSS","content","sourceMap","meta","options","getOptions","callback","async","configOption","postcssOptions","config","postcssFactory","getPostcssImplementation","implementation","Error","loadedConfig","loadConfig","error","useSourceMap","plugins","processOptions","getPostcssOptions","map","inline","annotation","prev","normalizeSourceMap","context","root","ast","type","satisfies","version","execute","exec","result","processor","process","startsWith","packageJSONDir","findPackageJSONDir","cwd","fs","statSync","bufferOfPackageJSON","readFileSync","resolve","_error","pkg","JSON","parse","dependencies","postcss","devDependencies","emitWarning","file","addDependency","name","warning","warnings","message","messages","addBuildDependency","addMissingDependency","addContextDependency","dir","emitFile","info","toJSON","undefined","normalizeSourceMapAfterPostcss","css"],"sources":["C:/Users/pehqi/my-react-app/node_modules/postcss-loader/dist/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _semver = require(\"semver\");\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet hasExplicitDependencyOnPostCSS = false;\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\n\nasync function loader(content, sourceMap, meta) {\n  const options = this.getOptions(_options.default);\n  const callback = this.async();\n  const configOption = typeof options.postcssOptions === \"undefined\" || typeof options.postcssOptions.config === \"undefined\" ? true : options.postcssOptions.config;\n  const postcssFactory = (0, _utils.getPostcssImplementation)(this, options.implementation);\n\n  if (!postcssFactory) {\n    callback(new Error(`The Postcss implementation \"${options.implementation}\" not found`));\n    return;\n  }\n\n  let loadedConfig;\n\n  if (configOption) {\n    try {\n      loadedConfig = await (0, _utils.loadConfig)(this, configOption, options.postcssOptions);\n    } catch (error) {\n      callback(error);\n      return;\n    }\n  }\n\n  const useSourceMap = typeof options.sourceMap !== \"undefined\" ? options.sourceMap : this.sourceMap;\n  const {\n    plugins,\n    processOptions\n  } = await (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);\n\n  if (useSourceMap) {\n    processOptions.map = {\n      inline: false,\n      annotation: false,\n      ...processOptions.map\n    };\n  }\n\n  if (sourceMap && processOptions.map) {\n    processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n  }\n\n  let root; // Reuse PostCSS AST from other loaders\n\n  if (meta && meta.ast && meta.ast.type === \"postcss\" && (0, _semver.satisfies)(meta.ast.version, `^${_package.default.version}`)) {\n    ({\n      root\n    } = meta.ast);\n  }\n\n  if (!root && options.execute) {\n    // eslint-disable-next-line no-param-reassign\n    content = (0, _utils.exec)(content, this);\n  }\n\n  let result;\n  let processor;\n\n  try {\n    processor = postcssFactory(plugins);\n    result = await processor.process(root || content, processOptions);\n  } catch (error) {\n    // Check postcss versions to avoid using PostCSS 7.\n    // For caching reasons, we use the readFileSync and existsSync functions from the context,\n    // not the functions from the `fs` module.\n    if (!hasExplicitDependencyOnPostCSS && processor && processor.version && processor.version.startsWith(\"7.\")) {\n      // The `findPackageJsonDir` function returns `string` or `null`.\n      // This is used to do for caching, that is, an explicit comparison with `undefined`\n      // is used to make the condition body run once.\n      const packageJSONDir = (0, _utils.findPackageJSONDir)(process.cwd(), this.fs.statSync);\n\n      if (packageJSONDir) {\n        let bufferOfPackageJSON;\n\n        try {\n          bufferOfPackageJSON = this.fs.readFileSync(_path.default.resolve(packageJSONDir, \"package.json\"), \"utf8\");\n        } catch (_error) {// Nothing\n        }\n\n        if (bufferOfPackageJSON) {\n          let pkg;\n\n          try {\n            pkg = JSON.parse(bufferOfPackageJSON);\n          } catch (_error) {// Nothing\n          }\n\n          if (pkg) {\n            if (!pkg.dependencies.postcss && !pkg.devDependencies.postcss) {\n              this.emitWarning(new Error(\"Add postcss as project dependency. postcss is not a peer dependency for postcss-loader. \" + \"Use `npm install postcss` or `yarn add postcss`\"));\n            } else {\n              hasExplicitDependencyOnPostCSS = true;\n            }\n          }\n        }\n      }\n    }\n\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n\n    if (error.name === \"CssSyntaxError\") {\n      callback(new _Error.default(error));\n    } else {\n      callback(error);\n    }\n\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  for (const message of result.messages) {\n    // eslint-disable-next-line default-case\n    switch (message.type) {\n      case \"dependency\":\n        this.addDependency(message.file);\n        break;\n\n      case \"build-dependency\":\n        this.addBuildDependency(message.file);\n        break;\n\n      case \"missing-dependency\":\n        this.addMissingDependency(message.file);\n        break;\n\n      case \"context-dependency\":\n        this.addContextDependency(message.file);\n        break;\n\n      case \"dir-dependency\":\n        this.addContextDependency(message.dir);\n        break;\n\n      case \"asset\":\n        if (message.content && message.file) {\n          this.emitFile(message.file, message.content, message.sourceMap, message.info);\n        }\n\n    }\n  } // eslint-disable-next-line no-undefined\n\n\n  let map = result.map ? result.map.toJSON() : undefined;\n\n  if (map && useSourceMap) {\n    map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n  }\n\n  const ast = {\n    type: \"postcss\",\n    version: result.processor.version,\n    root: result.root\n  };\n  callback(null, result.css, map, {\n    ast\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}