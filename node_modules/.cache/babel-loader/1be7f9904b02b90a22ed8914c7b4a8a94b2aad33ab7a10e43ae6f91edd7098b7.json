{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path = require('path'),\n  loaderUtils = require('loader-utils');\n\n/**\n * Create a value processing function for a given file path.\n *\n * @param {function(Object):string} join The inner join function\n * @param {string} root The loader options.root value where given\n * @param {string} directory The directory of the file webpack is currently processing\n * @return {function} value processing function\n */\nfunction valueProcessor({\n  join,\n  root,\n  directory\n}) {\n  var URL_STATEMENT_REGEX = /(url\\s*\\(\\s*)(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))(\\s*\\))/g,\n    QUERY_REGEX = /([?#])/g;\n\n  /**\n   * Process the given CSS declaration value.\n   *\n   * @param {string} value A declaration value that may or may not contain a url() statement\n   * @param {function(number):Object} getPathsAtChar Given an offset in the declaration value get a\n   *  list of possible absolute path strings\n   */\n  return function transformValue(value, getPathsAtChar) {\n    // allow multiple url() values in the declaration\n    //  split by url statements and process the content\n    //  additional capture groups are needed to match quotations correctly\n    //  escaped quotations are not considered\n    return value.split(URL_STATEMENT_REGEX).map(initialise).map(eachSplitOrGroup).join('');\n\n    /**\n     * Ensure all capture group tokens are a valid string.\n     *\n     * @param {string|void} token A capture group or uncaptured token\n     * @returns {string}\n     */\n    function initialise(token) {\n      return typeof token === 'string' ? token : '';\n    }\n\n    /**\n     * An Array reduce function that accumulates string length.\n     */\n    function accumulateLength(accumulator, element) {\n      return accumulator + element.length;\n    }\n\n    /**\n     * Encode the content portion of <code>url()</code> statements.\n     * There are 6 capture groups in the split making every 7th unmatched.\n     *\n     * @param {string} element A single split item\n     * @param {number} i The index of the item in the split\n     * @param {Array} arr The array of split values\n     * @returns {string} Every 3 or 5 items is an encoded url everything else is as is\n     */\n    function eachSplitOrGroup(element, i, arr) {\n      // the content of the url() statement is either in group 3 or group 5\n      var mod = i % 7;\n\n      // only one of the capture groups 3 or 5 will match the other will be falsey\n      if (element && (mod === 3 || mod === 5)) {\n        // calculate the offset of the match from the front of the string\n        var position = arr.slice(0, i - mod + 1).reduce(accumulateLength, 0);\n\n        // detect quoted url and unescape backslashes\n        var before = arr[i - 1],\n          after = arr[i + 1],\n          isQuoted = before === after && (before === '\\'' || before === '\"'),\n          unescaped = isQuoted ? element.replace(/\\\\{2}/g, '\\\\') : element;\n\n        // split into uri and query/hash and then determine if the uri is some type of file\n        var split = unescaped.split(QUERY_REGEX),\n          uri = split[0],\n          query = split.slice(1).join(''),\n          isRelative = testIsRelative(uri),\n          isAbsolute = testIsAbsolute(uri);\n\n        // file like URIs are processed but not all URIs are files\n        if (isRelative || isAbsolute) {\n          var bases = getPathsAtChar(position),\n            // construct iterator as late as possible in case sourcemap invalid\n            absolute = join({\n              uri,\n              query,\n              isAbsolute,\n              bases\n            });\n          if (typeof absolute === 'string') {\n            var relative = path.relative(directory, absolute).replace(/\\\\/g, '/'); // #6 - backslashes are not legal in URI\n\n            return loaderUtils.urlToRequest(relative + query);\n          }\n        }\n      }\n\n      // everything else, including parentheses and quotation (where present) and media statements\n      return element;\n    }\n  };\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * We also eliminate module relative (~) paths.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for relative uri\n   */\n  function testIsRelative(uri) {\n    return !!uri && loaderUtils.isUrlRequest(uri, false) && !path.isAbsolute(uri) && uri.indexOf('~') !== 0;\n  }\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for absolute uri\n   */\n  function testIsAbsolute(uri) {\n    return !!uri && typeof root === 'string' && loaderUtils.isUrlRequest(uri, root) && (/^\\//.test(uri) || path.isAbsolute(uri));\n  }\n}\nmodule.exports = valueProcessor;","map":{"version":3,"names":["path","require","loaderUtils","valueProcessor","join","root","directory","URL_STATEMENT_REGEX","QUERY_REGEX","transformValue","value","getPathsAtChar","split","map","initialise","eachSplitOrGroup","token","accumulateLength","accumulator","element","length","i","arr","mod","position","slice","reduce","before","after","isQuoted","unescaped","replace","uri","query","isRelative","testIsRelative","isAbsolute","testIsAbsolute","bases","absolute","relative","urlToRequest","isUrlRequest","indexOf","test","module","exports"],"sources":["C:/Users/pehqi/my-react-app/node_modules/resolve-url-loader/lib/value-processor.js"],"sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path        = require('path'),\n    loaderUtils = require('loader-utils');\n\n/**\n * Create a value processing function for a given file path.\n *\n * @param {function(Object):string} join The inner join function\n * @param {string} root The loader options.root value where given\n * @param {string} directory The directory of the file webpack is currently processing\n * @return {function} value processing function\n */\nfunction valueProcessor({ join, root, directory }) {\n  var URL_STATEMENT_REGEX = /(url\\s*\\(\\s*)(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))(\\s*\\))/g,\n      QUERY_REGEX         = /([?#])/g;\n\n  /**\n   * Process the given CSS declaration value.\n   *\n   * @param {string} value A declaration value that may or may not contain a url() statement\n   * @param {function(number):Object} getPathsAtChar Given an offset in the declaration value get a\n   *  list of possible absolute path strings\n   */\n  return function transformValue(value, getPathsAtChar) {\n\n    // allow multiple url() values in the declaration\n    //  split by url statements and process the content\n    //  additional capture groups are needed to match quotations correctly\n    //  escaped quotations are not considered\n    return value\n      .split(URL_STATEMENT_REGEX)\n      .map(initialise)\n      .map(eachSplitOrGroup)\n      .join('');\n\n    /**\n     * Ensure all capture group tokens are a valid string.\n     *\n     * @param {string|void} token A capture group or uncaptured token\n     * @returns {string}\n     */\n    function initialise(token) {\n      return typeof token === 'string' ? token : '';\n    }\n\n    /**\n     * An Array reduce function that accumulates string length.\n     */\n    function accumulateLength(accumulator, element) {\n      return accumulator + element.length;\n    }\n\n    /**\n     * Encode the content portion of <code>url()</code> statements.\n     * There are 6 capture groups in the split making every 7th unmatched.\n     *\n     * @param {string} element A single split item\n     * @param {number} i The index of the item in the split\n     * @param {Array} arr The array of split values\n     * @returns {string} Every 3 or 5 items is an encoded url everything else is as is\n     */\n    function eachSplitOrGroup(element, i, arr) {\n\n      // the content of the url() statement is either in group 3 or group 5\n      var mod = i % 7;\n\n      // only one of the capture groups 3 or 5 will match the other will be falsey\n      if (element && ((mod === 3) || (mod === 5))) {\n\n        // calculate the offset of the match from the front of the string\n        var position = arr.slice(0, i - mod + 1).reduce(accumulateLength, 0);\n\n        // detect quoted url and unescape backslashes\n        var before    = arr[i - 1],\n            after     = arr[i + 1],\n            isQuoted  = (before === after) && ((before === '\\'') || (before === '\"')),\n            unescaped = isQuoted ? element.replace(/\\\\{2}/g, '\\\\') : element;\n\n        // split into uri and query/hash and then determine if the uri is some type of file\n        var split      = unescaped.split(QUERY_REGEX),\n            uri        = split[0],\n            query      = split.slice(1).join(''),\n            isRelative = testIsRelative(uri),\n            isAbsolute = testIsAbsolute(uri);\n\n        // file like URIs are processed but not all URIs are files\n        if (isRelative || isAbsolute) {\n          var bases    = getPathsAtChar(position), // construct iterator as late as possible in case sourcemap invalid\n              absolute = join({ uri, query, isAbsolute, bases });\n\n          if (typeof absolute === 'string') {\n            var relative = path.relative(directory, absolute)\n              .replace(/\\\\/g, '/'); // #6 - backslashes are not legal in URI\n\n            return loaderUtils.urlToRequest(relative + query);\n          }\n        }\n      }\n\n      // everything else, including parentheses and quotation (where present) and media statements\n      return element;\n    }\n  };\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * We also eliminate module relative (~) paths.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for relative uri\n   */\n  function testIsRelative(uri) {\n    return !!uri && loaderUtils.isUrlRequest(uri, false) && !path.isAbsolute(uri) && (uri.indexOf('~') !== 0);\n  }\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for absolute uri\n   */\n  function testIsAbsolute(uri) {\n    return !!uri && (typeof root === 'string') && loaderUtils.isUrlRequest(uri, root) &&\n      (/^\\//.test(uri) || path.isAbsolute(uri));\n  }\n}\n\nmodule.exports = valueProcessor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}